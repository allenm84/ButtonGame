<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

using System;
using System.Runtime.InteropServices;

namespace ButtonGame
{
	public struct ARGB
	{
		[StructLayout(LayoutKind.Explicit)]
		private struct rgbHex
		{
			[FieldOffset(0)]
			public byte r;
			[FieldOffset(1)]
			public byte g;
			[FieldOffset(2)]
			public byte b;
			[FieldOffset(0)]
			public int value;
		}

		public byte A, R, G, B;

<#
var path = Host.ResolvePath("rgb.txt");
var lines = File.ReadAllLines(path);
var set = new HashSet<string>();

foreach(var line in lines)
{
	if(line.StartsWith("#")) continue;
	var entries = line.Split('#').ToList();
	var hex = entries.Last().Trim();
	var first = entries.First();

	var sb = new StringBuilder();
	bool toUpper = true;
	foreach(var c in first)
	{
		if(char.IsLetter(c))
		{
			sb.Append(toUpper ? char.ToUpper(c) : c);
			toUpper = false;
		}
		else
		{
			toUpper = true;
		}
	}

	var name = sb.ToString();
	if (set.Add(name))
	{
		WriteLine("\t\tpublic static readonly ARGB {0} = new ARGB(0x{1});", name, hex.Substring(1));
	}
}
#>

		public ARGB(int rgb)
		{
			var h = new rgbHex{ value = rgb };
			A = 255;
			R = h.r;
			G = h.g;
			B = h.b;
		}

		public ARGB(byte a, byte r, byte g, byte b)
		{
			A = a;
			R = r;
			G = g;
			B = b;
		}

		public static ARGB FromArgb(byte alpha, ARGB rgb)
		{
			return new ARGB(alpha, rgb.R, rgb.G, rgb.B);
		}
	}
}